[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-client-console"
version = "1.0.0"
description = "A Python UI to test MCP (Model Context Protocol) servers for protocol compliance"
authors = [
    { name = "Daniele Martinoli", email = "dmartino@redhat.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
keywords = ["mcp", "model-context-protocol", "testing", "streamlit", "ui"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: System :: Networking",
]

dependencies = [
    "mcp>=1.0.0",
    "streamlit>=1.28.0",
    "aiohttp>=3.8.0",
    "websockets>=11.0.0",
    "requests>=2.28.0",
    "json5>=0.9.0",
    "pydantic>=2.0.0",
    "pyarrow>=15.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "types-requests>=2.31.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",  # For testing HTTP connections
]

[project.urls]
Homepage = "https://github.com/your-org/mcp-client-console"
Documentation = "https://github.com/your-org/mcp-client-console#readme"
Repository = "https://github.com/your-org/mcp-client-console.git"
Issues = "https://github.com/your-org/mcp-client-console/issues"

[project.scripts]
mcp-client = "mcp_client_console.ui.streamlit_app:main"

[tool.hatch.build.targets.wheel]
packages = ["mcp_client_console"]

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), and isort (`I`) codes
select = ["E", "F", "I", "W", "B", "C4", "UP", "N", "ARG", "SIM", "TCH", "Q", "RUF"]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "RUF012",  # mutable class attributes should be annotated with `typing.ClassVar`
    "SIM117",  # use a single `with` statement with multiple contexts
    "TC001",  # move application import into a type-checking block
    "ARG001",  # unused function argument
    "ARG004",  # unused static method argument
    "SIM102",  # use a single `if` statement instead of nested `if` statements
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.ruff.lint.isort]
known-first-party = ["mcp_client_console"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow untyped function definitions
disallow_incomplete_defs = false  # Allow incomplete function definitions
check_untyped_defs = true
disallow_untyped_decorators = false  # Allow untyped decorators
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = false  # Less strict equality checking
ignore_missing_imports = true  # Ignore missing imports for external libraries

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "asyncio: marks tests as async",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mcp_client_console"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "pytest-cov>=6.2.1",
]
