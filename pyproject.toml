[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-client-console"
version = "1.0.0"
description = "A Python UI to test MCP (Model Context Protocol) servers for protocol compliance"
authors = [
    { name = "Daniele Martinoli", email = "dmartino@redhat.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
keywords = ["mcp", "model-context-protocol", "testing", "streamlit", "ui"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: System :: Networking",
]

dependencies = [
    "mcp>=1.0.0",
    "streamlit>=1.28.0",
    "aiohttp>=3.8.0",
    "websockets>=11.0.0",
    "requests>=2.28.0",
    "json5>=0.9.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",  # For testing HTTP connections
]

[project.urls]
Homepage = "https://github.com/your-org/mcp-client-console"
Documentation = "https://github.com/your-org/mcp-client-console#readme"
Repository = "https://github.com/your-org/mcp-client-console.git"
Issues = "https://github.com/your-org/mcp-client-console/issues"

[project.scripts]
mcp-client = "mcp_client_console.ui.streamlit_app:main"

[tool.hatch.build.targets.wheel]
packages = ["mcp_client_console"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_client_console"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "asyncio: marks tests as async",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["mcp_client_console"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
